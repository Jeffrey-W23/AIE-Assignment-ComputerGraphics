// includes, using, etc
#pragma once
#include "Application.h"
#include <glm/mat4x4.hpp>

// forward declares
class FlyCamera;

//--------------------------------------------------------------------------------------
// Application3D object. Inherits from Application.
//--------------------------------------------------------------------------------------
class Application3D : public age::Application
{
public:

	//--------------------------------------------------------------------------------------
	// Default Constructor.
	//--------------------------------------------------------------------------------------
	Application3D();

	//--------------------------------------------------------------------------------------
	// Default Destructor
	//--------------------------------------------------------------------------------------
	virtual ~Application3D();

	//--------------------------------------------------------------------------------------
	// Start:
	//
	// Return:
	//--------------------------------------------------------------------------------------
	virtual bool Start();

	//--------------------------------------------------------------------------------------
	// Shutdown:
	//--------------------------------------------------------------------------------------
	virtual void Shutdown();

	//--------------------------------------------------------------------------------------
	// Update:
	//
	// Param:
	//--------------------------------------------------------------------------------------
	virtual void Update(float deltaTime);

	//--------------------------------------------------------------------------------------
	// Draw:
	//--------------------------------------------------------------------------------------
	virtual void Draw();

protected:

	//--------------------------------------------------------------------------------------
	// A pointer to FlyCamera.
	//--------------------------------------------------------------------------------------
	FlyCamera* m_pCamera;

	//--------------------------------------------------------------------------------------
	// bool to unlock and lock camera
	//--------------------------------------------------------------------------------------
	bool m_bCameraLock;







	// rottation matrix
	glm::mat4 rot;

	// parent
	glm::mat4 parentMatrix;

	// child object
	glm::mat4 localMatrix;
	glm::mat4 globalMatrix;
	glm::mat4 viewMatrix;
	glm::mat4 projectionMatrix;
};