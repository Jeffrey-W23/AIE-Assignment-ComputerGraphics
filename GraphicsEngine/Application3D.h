// includes, using, etc
#pragma once
#include "Application.h"
#include <glm/mat4x4.hpp>
#include "Mesh.h"
#include "Shader.h"
#include "OBJMesh.h"
#include "Texture.h"

// forward declares
class FlyCamera;

//--------------------------------------------------------------------------------------
// Application3D object. Inherits from Application.
//--------------------------------------------------------------------------------------
class Application3D : public age::Application
{
public:

	//--------------------------------------------------------------------------------------
	// Default Constructor.
	//--------------------------------------------------------------------------------------
	Application3D();

	//--------------------------------------------------------------------------------------
	// Default Destructor.
	//--------------------------------------------------------------------------------------
	virtual ~Application3D();

	//--------------------------------------------------------------------------------------
	// Start: Initialize the game.
	//
	// Returns:
	//		bool: Returns a true or false for if the startup is sucessful.
	//--------------------------------------------------------------------------------------
	virtual bool Start();

	//--------------------------------------------------------------------------------------
	// shutdown: Called on application shutdown and does all the cleaning up (eg. Deleteing pointers.)
	//--------------------------------------------------------------------------------------
	virtual void Shutdown();

	//--------------------------------------------------------------------------------------
	// Update: Updates objects over time.
	//
	// Param:
	//		deltaTime: Pass in deltaTime. A number that updates per second.
	//--------------------------------------------------------------------------------------
	virtual void Update(float deltaTime);

	//--------------------------------------------------------------------------------------
	// Draw: A virtual function to render (or "draw") objects to the screen.
	//--------------------------------------------------------------------------------------
	virtual void Draw();

protected:

	//--------------------------------------------------------------------------------------
	// A pointer to FlyCamera.
	//--------------------------------------------------------------------------------------
	FlyCamera* m_pCamera;

	//--------------------------------------------------------------------------------------
	// bool to unlock and lock camera
	//--------------------------------------------------------------------------------------
	bool m_bCameraLock;

	//--------------------------------------------------------------------------------------
	// Struct Light: holds 3 vec3 values for the light direction, diffuse and specular.
	//--------------------------------------------------------------------------------------
	struct Light
	{
		glm::vec3 m_v3Direction;
		glm::vec3 m_v3Diffuse;
		glm::vec3 m_v3Specular;
	};

	//--------------------------------------------------------------------------------------
	// A Moving light of type light struct, this is the main light of the scene.
	//--------------------------------------------------------------------------------------
	Light m_lMovingLight;

	//--------------------------------------------------------------------------------------
	// A vector3 value for the ambient light of the scene.
	//--------------------------------------------------------------------------------------
	glm::vec3 m_v3AmbientLight;

	//--------------------------------------------------------------------------------------
	// Shaders: normal shader, phong shader, and unlit shader.
	//--------------------------------------------------------------------------------------
	aie::ShaderProgram m_sNormalMapShader;
	aie::ShaderProgram m_sPhongShader;
	aie::ShaderProgram m_sUnlitShader;

	//--------------------------------------------------------------------------------------
	// Objet mesh for the spear model
	//--------------------------------------------------------------------------------------
	aie::OBJMesh m_mSpearMesh;

	//--------------------------------------------------------------------------------------
	// matrix4 for the transform of the spear model
	//--------------------------------------------------------------------------------------
	glm::mat4 m_m4SpearTransform;

	//--------------------------------------------------------------------------------------
	// Objet mesh for the rock model
	//--------------------------------------------------------------------------------------
	aie::OBJMesh m_mRockMesh;

	//--------------------------------------------------------------------------------------
	// matrix4 for the transform of the rock model
	//--------------------------------------------------------------------------------------
	glm::mat4 m_m4RockTransform;

	//--------------------------------------------------------------------------------------
	// Objet mesh for the bunny model
	//--------------------------------------------------------------------------------------
	aie::OBJMesh m_mBunnyMesh;

	//--------------------------------------------------------------------------------------
	// matrix4 for the transform of the bunny model
	//--------------------------------------------------------------------------------------
	glm::mat4 m_m4BunnyTransform;

	//--------------------------------------------------------------------------------------
	// Object mesh for the sandbag model
	//--------------------------------------------------------------------------------------
	aie::OBJMesh m_mSandbagMesh;

	//--------------------------------------------------------------------------------------
	// matrix4 for the transform of the sandbag model
	//--------------------------------------------------------------------------------------
	glm::mat4 m_m4SandbagTransform;

	//--------------------------------------------------------------------------------------
	// Object mesh for the skullmountain model
	//--------------------------------------------------------------------------------------
	aie::OBJMesh m_mSkullMountainMesh;

	//--------------------------------------------------------------------------------------
	// matrix4 for the transform of the skullmountain model
	//--------------------------------------------------------------------------------------
	glm::mat4 m_m4SkullMountainTransform;

	//--------------------------------------------------------------------------------------
	// Object mesh for the Eclipse model
	//--------------------------------------------------------------------------------------
	aie::OBJMesh m_mEclipseMesh;

	//--------------------------------------------------------------------------------------
	// matrix4 for the transform of the Eclipse model
	//--------------------------------------------------------------------------------------
	glm::mat4 m_m4EclipseTransform;








	//--------------------------------------------------------------------------------------
	// Object mesh for the Apple model
	//--------------------------------------------------------------------------------------
	aie::OBJMesh m_mAppleMesh;

	//--------------------------------------------------------------------------------------
	// matrix4 for the transform of the Apple model
	//--------------------------------------------------------------------------------------
	glm::mat4 m_m4AppleTransform;







	// ------------ PLANETS ------------ // SORT // SORT // SORT // SORT // SORT // SORT // SORT
	//--------------------------------------------------------------------------------------
	// rotation matrix
	//--------------------------------------------------------------------------------------
	glm::mat4 rot;

	//--------------------------------------------------------------------------------------
	// parent matrix
	//--------------------------------------------------------------------------------------
	glm::mat4 parentMatrix;

	//--------------------------------------------------------------------------------------
	// child object
	//--------------------------------------------------------------------------------------
	glm::mat4 localMatrix;
	glm::mat4 globalMatrix;
	glm::mat4 viewMatrix;
	glm::mat4 projectionMatrix;
	// ------------ PLANETS ------------ // SORT // SORT // SORT // SORT // SORT // SORT // SORT
};